/* NOTE this file is autogenerated by Scalate : see http://scalate.fusesource.org/ */

import _root_.scala.collection.JavaConversions._
import _root_.org.fusesource.scalate.support.TemplateConversions._
import _root_.org.fusesource.scalate.util.Measurements._

object $_scalate_$helpMenu_ssp {
  def $_scalate_$render($_scalate_$_context: _root_.org.fusesource.scalate.RenderContext): Unit = {
    ;{
      implicit val context: org.fusesource.scalate.DefaultRenderContext = $_scalate_$_context.attribute("context")
      import context._
      
      
      $_scalate_$_context << ( "\n\n" );
      import       java.util.UUID

      $_scalate_$_context << ( "\n\n" );
      import       com.datastax.oss.driver.api.core.uuid.Uuids

      $_scalate_$_context << ( "\n\n" );
      ;{
        val basicCommandsId: UUID = $_scalate_$_context.attributeOrElse("basicCommandsId", Uuids.random())
        ;{
          val schemaDiscoveryId: UUID = $_scalate_$_context.attributeOrElse("schemaDiscoveryId", Uuids.random())
          ;{
            val queryParamsId: UUID = $_scalate_$_context.attributeOrElse("queryParamsId", Uuids.random())
            ;{
              val formatParamsId: UUID = $_scalate_$_context.attributeOrElse("formatParamsId", Uuids.random())
              ;{
                val preparedStatementsId: UUID = $_scalate_$_context.attributeOrElse("preparedStatementsId", Uuids.random())
                ;{
                  val dynamicFormsId: UUID = $_scalate_$_context.attributeOrElse("dynamicFormsId", Uuids.random())
                  ;{
                    val configurationId: UUID = $_scalate_$_context.attributeOrElse("configurationId", Uuids.random())
                    ;{
                      val sharedStatesId: UUID = $_scalate_$_context.attributeOrElse("sharedStatesId", Uuids.random())
                      ;{
                        val changelogId: UUID = $_scalate_$_context.attributeOrElse("changelogId", Uuids.random())
                        ;{
                          val contactsId: UUID = $_scalate_$_context.attributeOrElse("contactsId", Uuids.random())
                          ;{
                            val driverVersion: String = $_scalate_$_context.attribute("driverVersion")
                            $_scalate_$_context << ( "\n<br/>\n<br/>\n<nav class=\"navbar navbar-default\">\n    <ul class=\"nav navbar-nav\">\n        <li role=\"presentation\" class=\"dropdown\">\n            <a class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                <span class=\"text-info\"><span class=\"glyphicon glyphicon-book\"></span>&nbsp;<strong>Please select ...</strong></span>\n                <span class=\"text-info caret\"></span>\n                <ul class=\"dropdown-menu\">\n                    <li class=\"dropdown-header\"><span class=\"text-info\">Topics</span></li>\n                    <li>\n                        <a role=\"button\" data-toggle=\"collapse\" data-target=\"#" );
                            $_scalate_$_context <<< (                             basicCommandsId
 );
                            $_scalate_$_context << ( "\">\n                            <span class=\"text-info\"><span class=\"glyphicon glyphicon-bookmark\"></span>&nbsp;&nbsp;Basic Commands</span>\n                        </a>\n                    </li>\n                    <li>\n                        <a role=\"button\" data-toggle=\"collapse\" data-target=\"#" );
                            $_scalate_$_context <<< (                             schemaDiscoveryId
 );
                            $_scalate_$_context << ( "\">\n                            <span class=\"text-info\"><span class=\"glyphicon glyphicon-bookmark\"></span>&nbsp;&nbsp;Schema Discovery</span>\n                        </a>\n                    </li>\n                    <li>\n                        <a role=\"button\" data-toggle=\"collapse\" data-target=\"#" );
                            $_scalate_$_context <<< (                             queryParamsId
 );
                            $_scalate_$_context << ( "\">\n                            <span class=\"text-info\"><span class=\"glyphicon glyphicon-bookmark\"></span>&nbsp;&nbsp;Query Parameters</span>\n                        </a>\n                    </li>\n                    <li>\n                        <a role=\"button\" data-toggle=\"collapse\" data-target=\"#" );
                            $_scalate_$_context <<< (                             formatParamsId
 );
                            $_scalate_$_context << ( "\">\n                            <span class=\"text-info\"><span class=\"glyphicon glyphicon-bookmark\"></span>&nbsp;&nbsp;Formatting Parameters</span>\n                        </a>\n                    </li>\n                    <li>\n                        <a role=\"button\" data-toggle=\"collapse\" data-target=\"#" );
                            $_scalate_$_context <<< (                             preparedStatementsId
 );
                            $_scalate_$_context << ( "\">\n                            <span class=\"text-info\"><span class=\"glyphicon glyphicon-bookmark\"></span>&nbsp;&nbsp;Prepared Statements</span>\n                        </a>\n                    </li>\n                    <li>\n                        <a role=\"button\" data-toggle=\"collapse\" data-target=\"#" );
                            $_scalate_$_context <<< (                             dynamicFormsId
 );
                            $_scalate_$_context << ( "\">\n                            <span class=\"text-info\"><span class=\"glyphicon glyphicon-bookmark\"></span>&nbsp;&nbsp;Dynamic Forms</span>\n                        </a>\n                    </li>\n                    <li>\n                        <a role=\"button\" data-toggle=\"collapse\" data-target=\"#" );
                            $_scalate_$_context <<< (                             configurationId
 );
                            $_scalate_$_context << ( "\">\n                            <span class=\"text-info\"><span class=\"glyphicon glyphicon-bookmark\"></span>&nbsp;&nbsp;Interpreter Configuration</span>\n                        </a>\n                    </li>                    \n                    <li>\n                        <a role=\"button\" data-toggle=\"collapse\" data-target=\"#" );
                            $_scalate_$_context <<< (                             sharedStatesId
 );
                            $_scalate_$_context << ( "\">\n                            <span class=\"text-info\"><span class=\"glyphicon glyphicon-bookmark\"></span>&nbsp;&nbsp;Shared States</span>\n                        </a>\n                    </li>                    \n                    <li>\n                        <a role=\"button\" data-toggle=\"collapse\" data-target=\"#" );
                            $_scalate_$_context <<< (                             changelogId
 );
                            $_scalate_$_context << ( "\">\n                            <span class=\"text-info\"><span class=\"glyphicon glyphicon-bookmark\"></span>&nbsp;&nbsp;Change Log</span>\n                        </a>\n                    </li>                     \n                    <li>\n                        <a role=\"button\" data-toggle=\"collapse\" data-target=\"#" );
                            $_scalate_$_context <<< (                             contactsId
 );
                            $_scalate_$_context << ( "\">\n                            <span class=\"text-info\"><span class=\"glyphicon glyphicon-bookmark\"></span>&nbsp;&nbsp;Contacts &amp; Bugs</span>\n                        </a>\n                    </li>                      \n                </ul>\n            </a>\n        </li>\n\n        <li>\n            <a><span class=\"text-info\"><strong>CASSANDRA INTERPRETER DOCUMENTATION</strong></span></a>\n        </li>\n    </ul>\n    <ul class=\"nav navbar-nav navbar-right\">\n        <li class=\"dropdown\">\n            <a class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                <span class=\"text-info\"><strong>About ...</strong></span>\n                <span class=\"caret\"></span>\n            </a>\n            <ul class=\"dropdown-menu\">\n                <li>\n                    <a role=\"button\">\n                        <span class=\"text-info\">Version <strong>4.0</strong></span>\n                    </a>\n                </li>\n                <li>\n                    <a role=\"button\">\n                        <span class=\"text-info\">Java Driver Version <strong>" );
                            $_scalate_$_context <<< (                             driverVersion
 );
                            $_scalate_$_context << ( "</strong></span>\n                    </a>\n                </li>\n                <li>\n                    <a role=\"button\">\n                        <span class=\"text-info\">Author <strong>@doanduyhai, @alexott</strong></span>\n                    </a>\n                </li>\n            </ul>\n        </li>\n        <li>\n            <a href=\"#\"></a>\n        </li>    \n</nav>\n<br/><br/>\n<div class=\"container\">\n    <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\">\n            <h4 class=\"panel-title\">\n                <a role=\"button\" data-toggle=\"collapse\" data-target=\"#" );
                            $_scalate_$_context <<< (                             basicCommandsId
 );
                            $_scalate_$_context << ( "\" aria-expanded=\"false\">\n                    <span class=\"text-info\"><strong>Basic Commands</strong></span>\n                </a>\n            </h4>\n        </div>\n        <div id=\"" );
                            $_scalate_$_context <<< (                             basicCommandsId
 );
                            $_scalate_$_context << ( "\" class=\"panel-collapse collapse\" role=\"tabpanel\">\n            <div class=\"panel-body\">\n\n                <div class=\"panel panel-default\">\n                  <div class=\"panel-body\">\n                    <h3>I CQL Statements</h3>\n                    <p>This interpreter is compatible with any CQL statement supported by Cassandra. Ex:\n                        <br/><br/>\n                        <div class=\"row\">\n                            <div class=\"col-md-6 col-md-offset-3\">\n                                <pre>\n    INSERT INTO users(login,name) VALUES('jdoe','John DOE');\n    SELECT * FROM users WHERE login='jdoe';</pre>\n                            </div>\n                        </div>\n                        <br/>\n                        Each statement should be separated by a <strong>semi-colon</strong> (;).\n                        <br/>\n                        <strong>Multi-line</strong> statements as well as multiple statements on the <strong>same line</strong>\n                        are also supported as long as they are separated by a semi-colon. Ex:\n                        <br/>\n                        <br/>\n                        <div class=\"row\">\n                            <div class=\"col-md-8 col-md-offset-2\">\n                                <pre>\n    USE spark_demo;\n\n    SELECT * FROM albums_by_country LIMIT 1; SELECT * FROM countries LIMIT 1;\n\n    SELECT *\n    FROM artists\n    WHERE login='jlennon';</pre>\n                            </div>\n                        </div>\n                        <br/>\n                        <strong>Batch</strong> statements are supported and can span multiple lines, as well as\n                        <strong>DDL</strong>(CREATE/ALTER/DROP) statements:\n                        <br/>\n                        <br/>\n                        <div class=\"row\">\n                            <div class=\"col-md-8 col-md-offset-2\">\n                                <pre>\n    BEGIN BATCH\n        INSERT INTO users(login,name) VALUES('jdoe','John DOE');\n        INSERT INTO users_preferences(login,account_type) VALUES('jdoe','BASIC');\n    APPLY BATCH;\n\n    CREATE TABLE IF NOT EXISTS test(\n        key int PRIMARY KEY,\n        value text\n    );</pre>\n                            </div>\n                        </div>\n                        <br/>\n                        CQL statements are <strong>case-insensitive</strong> (except for column names and values).\n                        This means that the following statements are equivalent and valid:\n                        <br/>\n                        <br/>\n                        <div class=\"row\">\n                            <div class=\"col-md-8 col-md-offset-2\">\n                                <pre>\n    INSERT INTO users(login,name) VALUES('jdoe','John DOE');\n    Insert into users(login,name) vAlues('hsue','Helen SUE');</pre>\n                            </div>\n                        </div>\n                        <br/>\n                        The complete list of all CQL statements and versions can be found below:\n                        <br/><br/>\n                        <div class=\"row\">\n                            <div class=\"col-md-6 col-md-offset-3\">\n                               <table class=\"table table-bordered\">\n                                    <thead>\n                                        <tr>\n                                          <th style=\"text-align:left\" width=\"20%\">Cassandra version</th>\n                                          <th style=\"text-align:left\">Documentation</th></tr>\n                                    </thead>\n                                    <tbody>\n                                    <tr>\n                                        <td style=\"text-align:left\"><strong>3.x</strong></td>\n                                        <td style=\"text-align:left\">\n                                            <a href=\"http://docs.datastax.com/en/cql/3.3/cql/cqlIntro.html\" target=\"_blank\">\n                                            http://docs.datastax.com/en/cql/3.3/cql/cqlIntro.html\n                                            </a>\n                                        </td>\n                                    </tr>\n                                        <tr>\n                                            <td style=\"text-align:left\"><strong>2.2</strong></td>\n                                            <td style=\"text-align:left\">\n                                                <a href=\"http://docs.datastax.com/en/cql/3.3/cql/cqlIntro.html\" target=\"_blank\">\n                                                    http://docs.datastax.com/en/cql/3.3/cql/cqlIntro.html\n                                                </a>\n                                            </td>\n                                        </tr>\n                                        <tr>\n                                            <td style=\"text-align:left\"><strong>2.1</strong></td>\n                                            <td style=\"text-align:left\">\n                                                <a href=\"http://docs.datastax.com/en/cql/3.1/cql/cql_intro_c.html\" target=\"_blank\">\n                                                    http://docs.datastax.com/en/cql/3.1/cql/cql_intro_c.html\n                                                </a>\n                                            </td>\n                                        </tr>\n                                    </tbody>\n                                </table>\n                            </div>\n                        </div>\n\n\n                    </p>\n                    <h3>II Comments</h3>\n                    <p>\n                        It is possible to add comments between statements. Single line comments start with the\n                        <strong>hash</strong> sign (<code>#</code>), <strong>double minus</strong> (<code>--</code>), or <strong>double slashes</strong> (<code>//</code>). Multi-line comments are enclosed between\n                        <strong>&sol;&ast;&ast;</strong> and <strong>&ast;&ast;&sol;</strong>. Ex:\n\n                        <br/>\n                        <br/>\n                        <div class=\"row\">\n                            <div class=\"col-md-8 col-md-offset-2\">\n                                <pre>\n    # Single line comment style 1\n    INSERT INTO users(login,name) VALUES('jdoe','John DOE');\n\n    -- Single line comment style 2\n\n    // Single line comment style 3\n\n    /**\n     Multi line\n     comments\n     **/\n    Insert into users(login,name) vAlues('hsue','Helen SUE');</pre>\n                            </div>\n                        </div>\n                        <br/>\n\n                    </p>\n                    <h3>III Syntax Validation</h3>\n                    <p>\n                        The interpreters is shipped with a <em>built-in syntax validator</em>. This validator only\n                        checks for <strong>basic syntax errors</strong>. All CQL-related syntax validation is delegated\n                        directly to <strong>Cassandra</strong>\n                        <br/><br/>\n                        Most of the time, syntax errors are due to missing semi-colons between statements or typo errors.\n\n                    </p>\n\n                  </div>\n                </div>\n\n\n\n            </div>\n        </div>\n    </div>    \n    <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\">\n            <h4 class=\"panel-title\">\n                <a role=\"button\" data-toggle=\"collapse\" data-target=\"#" );
                            $_scalate_$_context <<< (                             schemaDiscoveryId
 );
                            $_scalate_$_context << ( "\" aria-expanded=\"false\">\n                    <span class=\"text-info\"><strong>Schema Discovery</strong></span>\n                </a>\n            </h4>\n        </div>\n        <div id=\"" );
                            $_scalate_$_context <<< (                             schemaDiscoveryId
 );
                            $_scalate_$_context << ( "\" class=\"panel-collapse collapse\" role=\"tabpanel\">\n            <div class=\"panel-body\">\n\n                <div class=\"panel panel-default\">\n                  <div class=\"panel-body\">\n                    <h3>I Commands For Discovery</h3>\n                    <p>\n                        To make schema discovery easier and more interactive, the following commands are supported:\n                        <br/><br/>\n                        <table class=\"table table-bordered\">\n                            <thead>\n                                <tr>\n                                  <th style=\"text-align:left\" width=\"40%\">Command</th>\n                                  <th style=\"text-align:left\">Description</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr>\n                                    <td style=\"text-align:left\"><strong>DESCRIBE CLUSTER;</strong></td>\n                                    <td style=\"text-align:left\">Show the current cluster name and its partitioner</td>\n                                </tr>\n                                <tr>\n                                    <td style=\"text-align:left\"><strong>DESCRIBE KEYSPACES;</strong></td>\n                                    <td style=\"text-align:left\">List all existing keyspaces in the cluster and their configuration\n                                    (replication factor, durable write ...)</td>\n                                </tr>\n                                <tr>\n                                    <td style=\"text-align:left\"><strong>DESCRIBE TABLES;</strong></td>\n                                    <td style=\"text-align:left\">List all existing keyspaces in the cluster and for each, all the tables name</td>\n                                </tr>\n                                <tr>\n                                    <td style=\"text-align:left\"><strong>DESCRIBE TYPES;</strong></td>\n                                    <td style=\"text-align:left\">List all existing keyspaces in the cluster and for each, all the types name</td>\n                                </tr>\n                                <tr>\n                                    <td style=\"text-align:left\"><strong>DESCRIBE FUNCTIONS;</strong></td>\n                                    <td style=\"text-align:left\">List all existing keyspaces in the cluster and for each, all the functions name and arguments</td>\n                                </tr>\n                                <tr>\n                                    <td style=\"text-align:left\"><strong>DESCRIBE AGGREGATES;</strong></td>\n                                    <td style=\"text-align:left\">List all existing keyspaces in the cluster and for each, all the aggregates name and arguments</td>\n                                </tr>\n                                <tr>\n                                    <td style=\"text-align:left\"><strong>DESCRIBE MATERIALIZED VIEWS;</strong></td>\n                                    <td style=\"text-align:left\">List all existing keyspaces in the cluster and for each, all the materialized view name</td>\n                                </tr>\n                                <tr>\n                                    <td style=\"text-align:left\"><strong>DESCRIBE KEYSPACE &lt;keyspace name&gt;;</strong></td>\n                                    <td style=\"text-align:left\">Describe the given keyspace configuration and all its table details (name, columns, ...)</td>\n                                </tr>\n                                <tr>\n                                    <td style=\"text-align:left\"><strong>DESCRIBE TABLE <em>(&lt;keyspace name&gt;).</em>&lt;table name&gt;;</strong></td>\n                                    <td style=\"text-align:left\">\n                                        Describe the given table. If the keyspace is not provided, the current\n                                        <strong>logged in</strong> keyspace is used. If there is no logged in keyspace,\n                                        the default <em>system</em> keyspace is used. If no table is found, an error message is raised\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td style=\"text-align:left\"><strong>DESCRIBE TYPE <em>(&lt;keyspace name&gt;).</em>&lt;type name&gt;;</strong></td>\n                                    <td style=\"text-align:left\">\n                                        Describe the given type(UDT). If the keyspace is not provided, the current\n                                        <strong>logged in</strong> keyspace is used. If there is no logged in keyspace,\n                                        the default <em>system</em> keyspace is used. If no type is found, an error message is raised\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td style=\"text-align:left\"><strong>DESCRIBE FUNCTION <em>(&lt;keyspace name&gt;).</em>&lt;function name&gt;;</strong></td>\n                                    <td style=\"text-align:left\">\n                                        Describe the given function. If the keyspace is not provided, the current\n                                        <strong>logged in</strong> keyspace is used. If there is no logged in keyspace,\n                                        the default <em>system</em> keyspace is used. If no function is found, an error message is raised\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td style=\"text-align:left\"><strong>DESCRIBE AGGREGATE <em>(&lt;keyspace name&gt;).</em>&lt;aggregate name&gt;;</strong></td>\n                                    <td style=\"text-align:left\">\n                                        Describe the given aggregate. If the keyspace is not provided, the current\n                                        <strong>logged in</strong> keyspace is used. If there is no logged in keyspace,\n                                        the default <em>system</em> keyspace is used. If no aggregate is found, an error message is raised\n                                    </td>\n                                </tr>        \n                                <tr>\n                                    <td style=\"text-align:left\"><strong>DESCRIBE MATERIALIZED VIEW <em>(&lt;keyspace name&gt;).</em>&lt;view name&gt;;</strong></td>\n                                    <td style=\"text-align:left\">\n                                        Describe the given materialized view. If the keyspace is not provided, the current\n                                        <strong>logged in</strong> keyspace is used. If there is no logged in keyspace,\n                                        the default <em>system</em> keyspace is used. If no materialized view is found, an error message is raised\n                                    </td>\n                                </tr>                                                                                          \n                            </tbody>\n                        </table>\n                        <br/>\n                        <div class=\"alert alert-danger\" role=\"alert\">\n                            Please note that each <strong>DESCRIBE</strong> command should be ended by <strong>a semi-colon</strong>.\n                        </div>\n                    </p>\n                    <h3>II Schema Display</h3>\n                    <p>\n                        The schema objects (cluster, keyspace, table, type, view, function &amp; aggregate) are displayed in a tabular format. There is a <strong>drop-down</strong> menu on the top left corner to expand objects details. On the top right menu is shown the Icon legend.\n\n                    </p>\n                  </div>\n                </div>\n\n            </div>\n        </div>\n    </div>    \n    <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\">\n            <h4 class=\"panel-title\">\n                <a role=\"button\" data-toggle=\"collapse\" data-target=\"#" );
                            $_scalate_$_context <<< (                             queryParamsId
 );
                            $_scalate_$_context << ( "\" aria-expanded=\"false\">\n                    <span class=\"text-info\"><strong>Query Parameters</strong></span>\n                </a>\n            </h4>\n        </div>\n        <div id=\"" );
                            $_scalate_$_context <<< (                             queryParamsId
 );
                            $_scalate_$_context << ( "\" class=\"panel-collapse collapse\" role=\"tabpanel\">\n            <div class=\"panel-body\">\n\n                <div class=\"panel panel-default\">\n                  <div class=\"panel-body\">\n                    <p>\n                        Sometimes you want to be able to pass runtime query parameters to your statements.\n                        Those parameters are <strong>not</strong> part of the CQL specs and are specific to the interpreter.\n                        Below is the list of all parameters:\n\n                        <br/><br/>\n                        <table class=\"table table-bordered\">\n                            <caption>\n                                <h4>Query Parameters</h4>\n                            </caption>\n                            <thead>\n                                <tr>\n                                    <th style=\"text-align:left\" width=\"20%\">Parameter</th>\n                                    <th style=\"text-align:left\" width=\"20%\">Syntax</th>\n                                    <th style=\"text-align:left\">Description</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr>\n                                    <td style=\"text-align:left\">Consistency Level</td>\n                                    <td style=\"text-align:left\"><strong>@consistency=<em>value</em></strong></td>\n                                    <td style=\"text-align:left\">Apply the given consistency level to all queries in the paragraph</td>\n                                </tr>\n                                <tr>\n                                    <td style=\"text-align:left\">Serial Consistency Level</td>\n                                    <td style=\"text-align:left\"><strong>@serialConsistency=<em>value</em></strong></td>\n                                    <td style=\"text-align:left\">Apply the given serial consistency level to all queries in the paragraph</td>\n                                </tr>\n                                <tr>\n                                    <td style=\"text-align:left\">Timestamp</td>\n                                    <td style=\"text-align:left\"><strong>@timestamp=<em>long value</em></strong></td>\n                                    <td style=\"text-align:left\">Apply the given timestamp to all queries in the paragraph.<br/>\n                                        Please note that timestamp value passed directly in CQL statement will override this value\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td style=\"text-align:left\">Fetch Size</td>\n                                    <td style=\"text-align:left\"><strong>@fetchSize=<em>int value</em></strong></td>\n                                    <td style=\"text-align:left\">Apply the given fetch size to all queries in the paragraph</td>\n                                </tr>\n                                    <tr>\n                                        <td style=\"text-align:left\">Request Timeout</td>\n                                        <td style=\"text-align:left\"><strong>@requestTimeOut=<em>int value</em></strong></td>\n                                        <td style=\"text-align:left\">Apply the given request timeout <strong>in millisecs</strong> to all queries in the paragraph</td>\n                                    </tr>\n                            </tbody>\n                        </table>\n                        <br/>\n                        Some parameters only accept restricted values:\n\n                        <br/><br/>\n                        <table class=\"table table-bordered\">\n                            <caption>\n                                <h4>Allowed Values</h4>\n                            </caption>\n                            <thead>\n                                <tr>\n                                    <th style=\"text-align:left\" width=\"30%\">Parameter</th>\n                                    <th style=\"text-align:left\">Possible Values</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr>\n                                    <td style=\"text-align:left\">Consistency Level</td>\n                                    <td style=\"text-align:left\"><strong>ALL, ANY, ONE, TWO, THREE, QUORUM, LOCAL_ONE, LOCAL_QUORUM, EACH_QUORUM</strong></td>\n                                </tr>\n                                <tr>\n                                    <td style=\"text-align:left\">Serial Consistency Level</td>\n                                    <td style=\"text-align:left\"><strong>SERIAL, LOCAL_SERIAL</strong></td>\n                                </tr>\n                                <tr>\n                                    <td style=\"text-align:left\">Timestamp</td>\n                                    <td style=\"text-align:left\">Any long value</td>\n                                </tr>\n                                <tr>\n                                    <td style=\"text-align:left\">Fetch Size</td>\n                                    <td style=\"text-align:left\">Any integer value</td>\n                                </tr>\n                                <tr>\n                                    <td style=\"text-align:left\">Request Timeout</td>\n                                    <td style=\"text-align:left\">Any integer value</td>\n                                </tr>\n                            </tbody>\n                        </table>\n                        <br/>\n\n                        <div class=\"alert alert-danger\" role=\"alert\">\n                            Please note that you <strong>should not add semi-colon (;)</strong> at the end of each parameter statement\n                        </div>\n\n                        Some examples:\n                        <br/><br/>\n                        <div class=\"row\">\n                            <div class=\"col-md-8 col-md-offset-2\">\n                                <pre>\n    CREATE TABLE IF NOT EXISTS spark_demo.ts(\n        key int PRIMARY KEY,\n        value text\n    );\n    TRUNCATE spark_demo.ts;\n\n    // Timestamp in the past\n    @timestamp=10\n\n    // Force timestamp directly in the first insert\n    INSERT INTO spark_demo.ts(key,value) VALUES(1,'first insert') USING TIMESTAMP 100;\n\n    // Select some data to make the clock turn\n    SELECT * FROM spark_demo.albums LIMIT 100;\n\n    // Now insert using the timestamp parameter set at the beginning(10)\n    INSERT INTO spark_demo.ts(key,value) VALUES(1,'second insert');\n\n    // Check for the result. You should see 'first insert'\n    SELECT value FROM spark_demo.ts WHERE key=1;</pre>\n                            </div>\n                        </div>\n                        <br/>\n\n                        Some remarks about query parameters:\n                        <br/><br/>\n                        <div class=\"alert alert-info\" role=\"alert\">\n                            <ul>\n                                <li><strong>many</strong> query parameters can be set in the same paragraph</li>\n                                <li>if the <strong>same</strong> query parameter is set many time with different values,\n                                    the interpreter only take into account the first value\n                                </li>\n                                <li>each query parameter applies to <strong>all</strong> CQL statement in the same paragraph,\n                                    unless you override the option using plain CQL text (like forcing timestamp with the USING clause)\n                                </li>\n                                <li>the order of each query parameter with regard to CQL statement does not matter</li>\n                            </ul>\n                        </div>\n                    </p>\n                    </div>\n                </div>\n\n\n            </div>\n        </div>\n    </div>        \n    \n    <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\">\n            <h4 class=\"panel-title\">\n                <a role=\"button\" data-toggle=\"collapse\" data-target=\"#" );
                            $_scalate_$_context <<< (                             formatParamsId
 );
                            $_scalate_$_context << ( "\" aria-expanded=\"false\">\n                    <span class=\"text-info\"><strong>Formatting Parameters</strong></span>\n                </a>\n            </h4>\n        </div>\n        <div id=\"" );
                            $_scalate_$_context <<< (                             formatParamsId
 );
                            $_scalate_$_context << ( "\" class=\"panel-collapse collapse\" role=\"tabpanel\">\n            <div class=\"panel-body\">\n\n                <div class=\"panel panel-default\">\n                  <div class=\"panel-body\">\n                    <p>\n                        Sometimes you want to be able to adjust formatting of results just\n                        for single paragraph. You can do this by passing one or more\n                        following parameters in the <tt>%cassandra</tt> interpreter local\n                        properties:\n\n                        <br/><br/>\n                        <table class=\"table table-bordered\">\n                            <caption>\n                                <h4>Formatting Parameters</h4>\n                            </caption>\n                            <thead>\n                                <tr>\n                                    <th style=\"text-align:left\" width=\"20%\">Parameter</th>\n                                    <th style=\"text-align:left\" width=\"20%\">Syntax</th>\n                                    <th style=\"text-align:left\">Description</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr>\n                                    <td style=\"text-align:left\">Output Format</td>\n                                    <td style=\"text-align:left\"><strong>outputFormat=<em>cql|human</em></strong></td>\n                                    <td style=\"text-align:left\">Selects formatting of the results - as CQL\n                                    literals, or human-readable (default)</td>\n                                </tr>\n                                <tr>\n                                    <td style=\"text-align:left\">Locale</td>\n                                    <td style=\"text-align:left\"><strong>locale=<em>value</em></strong></td>\n                                    <td style=\"text-align:left\">Name of the locale for formatting of results.\n                                    Should be a locale name supported by JVM.</td>\n                                </tr>\n                                <tr>\n                                    <td style=\"text-align:left\">Timezone</td>\n                                    <td style=\"text-align:left\"><strong>timezone=<em>value</em></strong></td>\n                                    <td style=\"text-align:left\">Timezone string for formatting of values of\n                                    time/date/timestamp type.  Should be a timezone\n                                    supported by JVM.</td>\n                                </tr>\n                                <tr>\n                                    <td style=\"text-align:left\">Timestamp Format</td>\n                                    <td style=\"text-align:left\"><strong>timestampFormat=<em>string</em></strong></td>\n                                    <td style=\"text-align:left\">Format string\n                                    for <a href=\"https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html\">DateTimeFormatter</>\n                                    that will be used for formatting of the values\n                                    of <tt>timestamp</tt> type</td>\n                                </tr>\n                                <tr>\n                                    <td style=\"text-align:left\">Time Format</td>\n                                    <td style=\"text-align:left\"><strong>timeFormat=<em>string</em></strong></td>\n                                    <td style=\"text-align:left\">Format string\n                                    for <a href=\"https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html\">DateTimeFormatter</>\n                                    that will be used for formatting of the values\n                                    of <tt>time</tt> type</td>\n                                </tr>\n                                <tr>\n                                    <td style=\"text-align:left\">Date Format</td>\n                                    <td style=\"text-align:left\"><strong>dateFormat=<em>string</em></strong></td>\n                                    <td style=\"text-align:left\">Format string\n                                    for <a href=\"https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html\">DateTimeFormatter</>\n                                    that will be used for formatting of the values\n                                    of <tt>date</tt> type</td>\n                                </tr>\n                                <tr>\n                                  <td style=\"text-align:left\">Float Precision</td>\n                                  <td style=\"text-align:left\"><strong>floatPrecision=<em>int value</em></strong></td>\n                                  <td style=\"text-align:left\">Precision when output values of <tt>float</tt> type</td>\n                                </tr>\n                                <tr>\n                                  <td style=\"text-align:left\">Double Precision</td>\n                                  <td style=\"text-align:left\"><strong>doublePrecision=<em>int value</em></strong></td>\n                                  <td style=\"text-align:left\">Precision when output values of <tt>double</tt> type</td>\n                                </tr>\n                            </tbody>\n                        </table>\n<br/><br/><b>Note</b>: if you need to apply the same output for all paragraphs, you can set\ncorresponding settings on the interpreter level!\n<br/><br/>\n\n                        Some examples:\n                        <br/><br/>\n                        <div class=\"row\">\n                              <pre>\n%cassandra(locale=de_DE, floatPrecision=2, doublePrecision=4, timeFormat=hh:mma, timestampFormat=MM/dd/yy HH:mm, dateFormat=\"E, d MMM yy\", timezone=Etc/GMT+2)\nselect date, time, timestamp, double, float, tuple, udt from zep.test_format;\n                                \n%cassandra(outputFormat=cql)\nselect id, double, float, text, date, time, timestamp from zep.test_format;</pre>\n                        </div>\n                    </p>\n                    </div>\n                </div>\n\n\n            </div>\n        </div>\n    </div>        \n    \n    <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\">\n            <h4 class=\"panel-title\">\n                <a role=\"button\" data-toggle=\"collapse\" data-target=\"#" );
                            $_scalate_$_context <<< (                             preparedStatementsId
 );
                            $_scalate_$_context << ( "\" aria-expanded=\"false\">\n                    <span class=\"text-info\"><strong>Prepared Statements</strong></span>\n                </a>\n            </h4>\n        </div>\n        <div id=\"" );
                            $_scalate_$_context <<< (                             preparedStatementsId
 );
                            $_scalate_$_context << ( "\" class=\"panel-collapse collapse\" role=\"tabpanel\">\n            <div class=\"panel-body\">\n                <div class=\"panel panel-default\">\n                  <div class=\"panel-body\">\n                    <h3>I Syntax</h3>\n                    <br/>\n                    <p>\n                        For performance reason, it is better to <strong>prepare statements</strong> before-hand and reuse\n                        them later by providing bound values. This interpreter provides 3 commands to handle prepared and\n                        bound statements:\n                        <br/><br/>\n                        <ol>\n                            <li><strong>@prepare</strong></li>\n                            <li><strong>@bind</strong></li>\n                            <li><strong>@remove_prepared</strong></li>\n                        </ol>\n                        <br/>\n                        Example:\n                        <br/>\n                        <div class=\"row\">\n                            <div class=\"col-md-10 col-md-offset-1\">\n                                <pre>\n    @prepare[statement-name]=...\n\n    @bind[statement-name]=\u2019text\u2019, 1223, \u20192015-07-30 12:00:01\u2019, null, true, [\u2018list_item1\u2019, \u2019list_item2\u2019]\n\n    @bind[statement-name-with-no-bound-value]\n\n    @remove_prepare[statement-name]</pre>\n                            </div>\n                        </div>\n                        <br/>\n\n                    <h3>II @prepare</h3>\n                    <br/>\n                    <p>\n                        You can use the syntax \"<strong>@prepare[statement-name]=SELECT ...</strong>\" to create a prepared statement.\n                        The <em>statement-name</em> is mandatory because the interpreter prepares the given statement with the\n                        Java driver and saves the generated prepared statement in an internal map, using the provided\n                        <em>statement-name</em> as search key.\n                        <br/><br/>\n                        <div class=\"alert alert-info\">\n                            Please note that this internal prepared statement map is shared with <strong>all notebooks</strong>\n                            and <strong>all paragraphs</strong> because there is only one instance of the interpreter for Cassandra\n                        </div>\n                        <br/>\n                        <div class=\"alert alert-warning\">\n                            If the interpreter encounters many @prepare for the <strong>same statement-name</strong> (key),\n                            only the <strong>first</strong> statement will be taken into account.\n                        </div>\n                        <br/>\n                        Example:\n                        <br/>\n                        <div class=\"row\">\n                            <div class=\"col-md-10 col-md-offset-1\">\n                                <pre>\n    @prepare[select]=SELECT * FROM spark_demo.albums LIMIT ?\n\n    @prepare[select]=SELECT * FROM spark_demo.artists LIMIT ?</pre>\n                            </div>\n                        </div>\n                        <br/>\n\n                        For the above example, the prepared statement is <strong>\"SELECT * FROM spark_demo.albums LIMIT ?\"</strong>.\n                        <strong>\"SELECT * FROM spark_demo.artists LIMIT ?\"</strong> is ignored because an entry already exists in the\n                        prepared statements map with the key <strong>select</strong>.\n                        <br/><br/>\n                        In the context of Zeppelin, a notebook can be scheduled to be executed at regular interval,\n                        thus it is necessary to avoid re-preparing many time the same statement (considered an anti-pattern).\n                    </p>\n                    <h3>III @bind</h3>\n                    <br/>\n                    <p>\n                        Once the statement is prepared (possibly in a separated notebook/paragraph). You can bind values to it:\n                        <br/><br/>\n                        <div class=\"row\">\n                            <div class=\"col-md-10 col-md-offset-1\">\n                                <pre>\n    @bind[select_first]=10</pre>\n                            </div>\n                        </div>\n                        <br/>\n                        Bound values are not mandatory for the <strong>@bind</strong> statement.\n                        However if you provide bound values, they need to comply to some syntax:\n\n                        <ul>\n                            <li>String values should be enclosed between simple quotes ( \u2018 )</li>\n                            <li>Date values should be enclosed between simple quotes ( \u2018 ) and respect the formats:\n                                <ol>\n                                    <li>yyyy-MM-dd HH:MM:ss</li>\n                                    <li>yyyy-MM-dd HH:MM:ss.SSS</li>\n                                </ol>\n                            </li>\n                            <li><strong>null</strong> is parsed as-is</li>\n                            <li><strong>boolean</strong> (true|false) are parsed as-is </li>\n                            <li>collection values must follow the\n                                <a href=\"http://docs.datastax.com/en/cql/3.1/cql/cql_using/use_collections_c.html\" target=\"_blank\">standard CQL syntax</a>:\n                                <ul>\n                                    <li>list:  [\u2018list_item1\u2019, \u2019list_item2\u2019, ...]</li>\n                                    <li>set: {\u2018set_item1\u2019, \u2018set_item2\u2019, \u2026}</li>\n                                    <li>map: {\u2018key1\u2019: \u2018val1\u2019, \u2018key2\u2019: \u2018val2\u2019, \u2026}</li>\n                                </ul>\n                            </li>\n                            <li>\n                                tuple values should be enclosed between parenthesis\n                                (see <a href=\"http://docs.datastax.com/en/cql/3.1/cql/cql_reference/tupleType.html\" target=\"_blank\">tuple CQL syntax</a>):\n                                (\u2018text\u2019, 123, true)\n                            </li>\n                            <li>\n                                udt values should be enclosed between brackets\n                                (see <a href=\"http://docs.datastax.com/en/cql/3.1/cql/cql_using/cqlUseUDT.html\" target=\"_blank\">udt CQL syntax</a>):\n                                {stree_name: \u2018Beverly Hills\u2019,  number: 104, zip_code: 90020, state: \u2018California\u2019, \u2026}\n                            </li>\n                        </ul>\n                        <br/>\n                        <div class=\"alert alert-info\">\n                            It is possible to use the <strong>@bind</strong> statement inside a batch: <br/>\n                            <pre>\n    BEGIN BATCH\n        @bind[insert_user]='jdoe','John DOE'\n        UPDATE users SET age = 27 WHERE login='hsue';\n    APPLY BATCH;</pre>\n                        </div>\n                        <br/>\n                    </p>\n                    <h3>IV @remove_prepare</h3>\n                    <br/>\n                    <p>\n                        To avoid for a prepared statement to stay forever in the prepared statement map, you can use the <strong>@remove_prepare[statement-name]</strong> syntax\n                        to remove it. Removing a non-existing prepared statement yields no error.\n                    </p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>  \n    \n    <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\">\n            <h4 class=\"panel-title\">\n                <a role=\"button\" data-toggle=\"collapse\" data-target=\"#" );
                            $_scalate_$_context <<< (                             dynamicFormsId
 );
                            $_scalate_$_context << ( "\" aria-expanded=\"false\">\n                    <span class=\"text-info\"><strong>Dynamic Forms</strong></span>\n                </a>\n            </h4>\n        </div>\n        <div id=\"" );
                            $_scalate_$_context <<< (                             dynamicFormsId
 );
                            $_scalate_$_context << ( "\" class=\"panel-collapse collapse\" role=\"tabpanel\">\n            <div class=\"panel-body\">\n\n                <div class=\"panel panel-default\">\n                  <div class=\"panel-body\">\n                    <p>\n                        Instead of hard-coding your CQL queries, it is possible to use <strong>\n                        <a href=\"http://zeppelin.apache.org/docs/0.6.0-SNAPSHOT/manual/dynamicform.html\" target=\"_blank\">Zeppelin dynamic form</a>\n                        </strong> syntax to inject simple value or multiple choices forms.\n\n                        The legacy mustache syntax (  <strong>{{ }}</strong> ) to bind input text and select form is still supported but is deprecated and will be removed in future releases.\n\n                        <br/><br/>\n\n                        <h6> -- Legacy syntax -- </h6>\n                        The syntax for simple parameter is: <strong>{{input_Label=default value}}</strong>.\n                        The default value is mandatory because the first time the paragraph is executed,\n                        we launch the CQL query before rendering the form so at least one value should be provided.\n                        <br/><br/>\n                        The syntax for multiple choices parameter is: <strong>{{input_Label=value1 | value2 | \u2026 | valueN }}</strong>.\n                        By default the first choice is used for CQL query the first time the paragraph is executed.\n                        <h6> -- End legacy syntax -- </h6>\n                        <br/><br/>\n                        Example:\n                        <br/>\n                        <div class=\"row\">\n                            <div class=\"col-md-10 col-md-offset-1\">\n                                <pre>\n    #Secondary index on performer style\n    SELECT name, country, performer\n    FROM spark_demo.performers\n    WHERE name='${performer=Sheryl Crow|Doof|Fanfarlo|Los Paranoia}'\n    AND styles CONTAINS '${style=Rock}';</pre>\n                            </div>\n                        </div>\n                        <br/>\n\n                        In the above example, the first CQL query will be executed for <em>performer='Sheryl Crow'</em>\n                        AND <em>style='Rock'</em>. For subsequent queries, you can change the value directly using the form.\n                        Please note that we enclosed the {{ }} block between simple quotes (') because Cassandra expects a String here.\n                        We could have also use the <strong>${style='Rock'}</strong> syntax but this time, the value\n                        displayed on the form is <em>'Rock'</em> and not <em>Rock</em>.\n\n                        <br/><br/>\n                        <div class=\"alert alert-info\">\n                            It is also possible to use dynamic forms for <strong>prepared statements</strong>: <br/>\n                            <strong>@bind[select]=='${performer=Sheryl Crow|Doof|Fanfarlo|Los Paranoia}', '${style=Rock}'</strong>\n                        </div>\n                       </pre>\n                    </p>\n                    </div>\n                </div>\n\n            </div>\n        </div>\n    </div>  \n    \n    <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\">\n            <h4 class=\"panel-title\">\n                <a role=\"button\" data-toggle=\"collapse\" data-target=\"#" );
                            $_scalate_$_context <<< (                             configurationId
 );
                            $_scalate_$_context << ( "\" aria-expanded=\"false\">\n                    <span class=\"text-info\"><strong>Interpreter Configuration</strong></span>\n                </a>\n            </h4>\n        </div>\n        <div id=\"" );
                            $_scalate_$_context <<< (                             configurationId
 );
                            $_scalate_$_context << ( "\" class=\"panel-collapse collapse\" role=\"tabpanel\">\n            <div class=\"panel-body\">\n                The <strong>Cassandra</strong> interpreter comes with some some configuration values for the Java driver:\n\n                 <table class=\"table table-bordered\">\n                    <caption>\n                        <h4>Interpreter Configuration</h4>\n                    </caption>\n                     <thead>\n                        <tr>\n                            <th style=\"text-align:left\">Parameter</th>\n                            <th style=\"text-align:left\">Default Value</th>\n                        </tr>\n                     </thead>\n                     <tbody>\n                        <tr>\n                            <td style=\"text-align:left\">cassandra.cluster</td>\n                            <td style=\"text-align:left\"><strong>Test Cluster</strong></td>\n                        </tr>\n                        <tr>\n                            <td style=\"text-align:left\">cassandra.compression.protocol</td>\n                            <td style=\"text-align:left\"><strong>NONE</strong>, possible values: LZ4, SNAPPY</td>\n                        </tr>\n                        <tr>\n                            <td style=\"text-align:left\">cassandra.credentials.password</td>\n                            <td style=\"text-align:left\"><strong>none</strong></td>\n                        </tr>\n                        <tr>\n                            <td style=\"text-align:left\">cassandra.credentials.username</td>\n                            <td style=\"text-align:left\"><strong>none</strong></td>\n                        </tr>\n                        <tr>\n                            <td style=\"text-align:left\">cassandra.hosts</td>\n                            <td style=\"text-align:left\"><strong>localhost</strong></td>\n                        </tr>\n                        <tr>\n                            <td style=\"text-align:left\">cassandra.interpreter.parallelism</td>\n                            <td style=\"text-align:left\"><strong>10</strong></td>\n                        </tr>\n                        <tr>\n                            <td style=\"text-align:left\">cassandra.keyspace</td>\n                            <td style=\"text-align:left\"><strong>system</strong></td>\n                        </tr>\n                        <tr>\n                            <td style=\"text-align:left\">cassandra.load.balancing.policy</td>\n                            <td style=\"text-align:left\"><strong>DEFAULT</strong>, or a FQCN of a custom class</td>\n                        </tr>\n                        <tr>\n                            <td style=\"text-align:left\">cassandra.max.schema.agreement.wait.second</td>\n                            <td style=\"text-align:left\"><strong>10</strong></td>\n                        </tr>\n                        <tr>\n                            <td style=\"text-align:left\">cassandra.native.port</td>\n                            <td style=\"text-align:left\"><strong>9042</strong></td>\n                        </tr>\n                        <tr>\n                            <td style=\"text-align:left\">cassandra.pooling.core.connection.per.host.local</td>\n                            <td style=\"text-align:left\"><strong>V3 and above: 1</strong></td>\n                        </tr>\n                        <tr>\n                            <td style=\"text-align:left\">cassandra.pooling.core.connection.per.host.remote</td>\n                            <td style=\"text-align:left\"><strong>V3 and above: 1</strong></td>\n                        </tr>\n                        <tr>\n                            <td style=\"text-align:left\">cassandra.pooling.heartbeat.interval.seconds</td>\n                            <td style=\"text-align:left\"><strong>30</strong></td>\n                        </tr>\n                        <tr>\n                            <td style=\"text-align:left\">cassandra.pooling.idle.timeout.seconds</td>\n                            <td style=\"text-align:left\"><strong>Test Cluster</strong></td>\n                        </tr>\n                        <tr>\n                            <td style=\"text-align:left\">cassandra.pooling.max.connection.per.host.local</td>\n                            <td style=\"text-align:left\"><strong>V3 and above: 1</strong></td>\n                        </tr>\n                        <tr>\n                            <td style=\"text-align:left\">cassandra.pooling.max.connection.per.host.remote</td>\n                            <td style=\"text-align:left\"><strong>V3 and above: 1</strong></td>\n                        </tr>\n                        <tr>\n                            <td style=\"text-align:left\">cassandra.pooling.max.request.per.connection.local</td>\n                            <td style=\"text-align:left\"><strong>V3 and above: 1024</strong></td>\n                        </tr>\n                        <tr>\n                            <td style=\"text-align:left\">cassandra.pooling.max.request.per.connection.remote</td>\n                            <td style=\"text-align:left\"><strong>V3 and above: 256</strong></td>\n                        </tr>\n                        <tr>\n                            <td style=\"text-align:left\">cassandra.pooling.new.connection.threshold.local</td>\n                            <td style=\"text-align:left\"><strong>V3 and above: 800</strong></td>\n                        </tr>\n                        <tr>\n                            <td style=\"text-align:left\">cassandra.pooling.new.connection.threshold.remote</td>\n                            <td style=\"text-align:left\"><strong>V3 and above: 200</strong></td>\n                        </tr>\n                        <tr>\n                            <td style=\"text-align:left\">cassandra.pooling.pool.timeout.millisecs</td>\n                            <td style=\"text-align:left\"><strong>5000</strong></td>\n                        </tr>\n                        <tr>\n                            <td style=\"text-align:left\">cassandra.protocol.version</td>\n                            <td style=\"text-align:left\"><strong>4</strong></td>\n                        </tr>\n                        <tr>\n                            <td style=\"text-align:left\">cassandra.query.default.consistency</td>\n                            <td style=\"text-align:left\"><strong>ONE</strong></td>\n                        </tr>\n                        <tr>\n                            <td style=\"text-align:left\">cassandra.query.default.fetchSize</td>\n                            <td style=\"text-align:left\"><strong>5000</strong></td>\n                        </tr>\n                        <tr>\n                            <td style=\"text-align:left\">cassandra.query.default.serial.consistency</td>\n                            <td style=\"text-align:left\"><strong>SERIAL</strong></td>\n                        </tr>\n                        <tr>\n                            <td style=\"text-align:left\">cassandra.reconnection.policy</td>\n                            <td style=\"text-align:left\"><strong>DEFAULT</strong>, or a FQCN of a custom class</td>\n                        </tr>\n                        <tr>\n                            <td style=\"text-align:left\">cassandra.retry.policy</td>\n                            <td style=\"text-align:left\"><strong>DEFAULT</strong>, or a FQCN of a custom class</td>\n                        </tr>\n                        <tr>\n                            <td style=\"text-align:left\">cassandra.socket.connection.timeout.millisecs</td>\n                            <td style=\"text-align:left\"><strong>500</strong></td>\n                        </tr>\n                        <tr>\n                            <td style=\"text-align:left\">cassandra.socket.read.timeout.millisecs</td>\n                            <td style=\"text-align:left\"><strong>12000</strong></td>\n                        </tr>\n                        <tr>\n                            <td style=\"text-align:left\">cassandra.socket.tcp.no_delay</td>\n                            <td style=\"text-align:left\"><strong>true</strong></td>\n                        </tr>\n                        <tr>\n                            <td style=\"text-align:left\">cassandra.speculative.execution.policy</td>\n                            <td style=\"text-align:left\"><strong>DEFAULT</strong>, or a FQCN of a custom class</td>\n                        </tr>\n                     </tbody>\n                 </table>\n            </div>\n        </div>\n    </div>    \n\n    <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\">\n            <h4 class=\"panel-title\">\n                <a role=\"button\" data-toggle=\"collapse\" data-target=\"#" );
                            $_scalate_$_context <<< (                             sharedStatesId
 );
                            $_scalate_$_context << ( "\" aria-expanded=\"false\">\n                    <span class=\"text-info\"><strong>Shared states</strong></span>\n                </a>\n            </h4>\n        </div>\n        <div id=\"" );
                            $_scalate_$_context <<< (                             sharedStatesId
 );
                            $_scalate_$_context << ( "\" class=\"panel-collapse collapse\" role=\"tabpanel\">\n            <div class=\"panel-body\">\n               It is possible to execute many paragraphs in parallel. However, at the back-end side, we\u2019re still using synchronous queries. <em>Asynchronous execution</em> is only possible when it is possible to return a <strong>Future</strong> value in the <strong>InterpreterResult</strong>. It may be an interesting proposal for the <strong>Zeppelin</strong> project.\n               <br/><br/>\n               Recently, <strong>Zeppelin</strong> allows you to choose the level of isolation for your interpreters (see\n               <strong><a href=\"http://zeppelin.apache.org/docs/0.6.0-SNAPSHOT/manual/interpreters.html\" target=\"_blank\">Interpreter Binding Mode</a></strong> ).\n               <br/><br/>\n               Long story short, you have 3 available bindings:\n\n               <ul>\n                   <li><strong>shared</strong> : <em>same JVM</em> and <em>same Interpreter instance</em> for all notes</li>\n                   <li><strong>scoped</strong> : <em>same JVM</em> but <em>different Interpreter instances</em>, one for each note</li>\n                   <li><strong>isolated</strong> : <em>different JVM</em> running a <em>single Interpreter instance</em>, one JVM for each note</li>\n               </ul>\n\n               <br/>\n               Using the <strong>shared</strong> binding, the same <code>com.datastax.driver.core.Session</code> object is used for all notes and paragraphs.\n               Consequently, if you use the <strong>USE keyspace name;</strong> statement to log into a keyspace,\n               it will change the keyspace for all current users of the Cassandra interpreter because we only create 1\n               <code>com.datastax.driver.core.Session</code> object per instance of Cassandra interpreter.\n\n               <br/><br/>\n               The same remark does apply to the <strong>prepared statement hash map</strong>, it is shared by all users using the same instance of Cassandra interpreter.\n               <br/><br/>\n               When using <strong>scoped</strong> binding, in the <em>same JVM</em> <strong>Zeppelin</strong> will create multiple instances of the Cassandra interpreter,\n               thus multiple <code>com.datastax.driver.core.Session</code> objects.\n               <strong>Beware of resource and memory usage using this binding !</strong>\n               <br/><br/>\n               The <strong>isolated</strong> mode is the most extreme and will create as many JVM/<code>com.datastax.driver.core.Session</code> object as there are distinct notes.\n\n\n               </div>\n        </div>\n    </div>\n        \n    <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\">\n            <h4 class=\"panel-title\">\n                <a role=\"button\" data-toggle=\"collapse\" data-target=\"#" );
                            $_scalate_$_context <<< (                             changelogId
 );
                            $_scalate_$_context << ( "\" aria-expanded=\"false\">\n                    <span class=\"text-info\"><strong>Change Log</strong></span>\n                </a>\n            </h4>\n        </div>        \n        <div id=\"" );
                            $_scalate_$_context <<< (                             changelogId
 );
                            $_scalate_$_context << ( "\" class=\"panel-collapse collapse\" role=\"tabpanel\">\n            <div class=\"panel-body\">\n                <strong>4.0</strong>&nbsp;:\n                <br/>\n                <ul>\n                    <li>Migrate to DataStax Java driver 4.x that supports both Cassandra and DSE.  This contains breaking changes, like, deprecation of <code>@retryPolicy</code>, dropped support for Cassandra 1.2/2.0</li>\n                    <li>Fix schema disagreement that could arise when executing multiple DDL statements</li>\n                    <li>Added support for <code>--</code> comment style</li>\n                    <li>Added options for formatting of output (interpreter and cell level)</li>\n                </ul>\n                <strong>3.0</strong>&nbsp;:\n                <br/>\n                <ul>\n                    <li>Update documentation</li>\n                    <li>Update interactive documentation</li>\n                    <li>Add support for binary protocol <strong>V4</strong></li>\n                    <li>Implement new <code>@requestTimeOut</code> runtime option</li>\n                    <li>Upgrade Java driver version to <strong>3.0.1</strong></li>\n                    <li>Allow interpreter to add dynamic forms programmatically when using FormType.SIMPLE</li>\n                    <li>Allow dynamic form using default Zeppelin syntax</li>\n                    <li>Fixing typo on FallThroughPolicy</li>\n                    <li>Look for data in AngularObjectRegistry before creating dynamic form</li>\n                    <li>Add missing support for <code>ALTER</code> statements</li>\n                </ul>\n                <strong>2.0</strong>&nbsp;: \n                <br/>\n                <ul>\n                    <li>Update help menu and add changelog</li>\n                    <li>Add Support for User Defined Functions, User Defined Aggregates and Materialized Views</li>\n                    <li>Upgrade Java driver version to <strong>3.0.0-rc1</strong></li>\n                </ul>\n                <strong>1.0</strong>&nbsp;: \n                <br/>\n                <ul>\n                    <li>Initial version</li>\n                </ul>                \n            </div>\n        </div>    \n    </div>\n    <div class=\"panel panel-default\">\n        <div class=\"panel-heading\" role=\"tab\">\n            <h4 class=\"panel-title\">\n                <a role=\"button\" data-toggle=\"collapse\" data-target=\"#" );
                            $_scalate_$_context <<< (                             contactsId
 );
                            $_scalate_$_context << ( "\" aria-expanded=\"false\">\n                    <span class=\"text-info\"><strong>Contact &amp; Bugs</strong></span>\n                </a>\n            </h4>\n        </div>        \n        <div id=\"" );
                            $_scalate_$_context <<< (                             contactsId
 );
                            $_scalate_$_context << ( "\" class=\"panel-collapse collapse\" role=\"tabpanel\">\n            <div class=\"panel-body\">\n                If you encounter a bug for this interpreter, please create a <a href=\"https://issues.apache.org/jira/browse/ZEPPELIN\" target=\"_blank\"><strong>JIRA</strong></a> ticket.</a>\n            </div>\n        </div>            \n    </div>    \n</div>\n" );
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}


class $_scalate_$helpMenu_ssp extends _root_.org.fusesource.scalate.Template {
  def render(context: _root_.org.fusesource.scalate.RenderContext): Unit = $_scalate_$helpMenu_ssp.$_scalate_$render(context)
}
